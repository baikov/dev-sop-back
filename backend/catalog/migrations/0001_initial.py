# Generated by Django 4.2.5 on 2023-10-02 19:40

from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="Опубликовано"),
                ),
                (
                    "ordering",
                    models.PositiveSmallIntegerField(
                        default=500, verbose_name="Порядок"
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        max_length=150,
                        populate_from="name",
                        verbose_name="slug",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=350, verbose_name="SEO Title"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="SEO Description"
                    ),
                ),
                ("h1", models.CharField(blank=True, max_length=250, verbose_name="H1")),
                (
                    "is_index",
                    models.BooleanField(default=True, verbose_name="Robots index"),
                ),
                (
                    "is_follow",
                    models.BooleanField(default=True, verbose_name="Robots follow"),
                ),
                (
                    "parsed_name",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        verbose_name="Название категории из парсинга",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=500, verbose_name="Название категории"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1500, verbose_name="Описание"
                    ),
                ),
                (
                    "parse_url",
                    models.URLField(
                        blank=True, max_length=500, verbose_name="URL парсинга"
                    ),
                ),
                (
                    "weight_coefficient",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        max_digits=20,
                        verbose_name="Коэфициент веса",
                    ),
                ),
                (
                    "price_coefficient",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        max_digits=20,
                        verbose_name="Коэфициент цены",
                    ),
                ),
                (
                    "last_parsed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Дата последнего парсинга"
                    ),
                ),
                (
                    "is_parsing_successful",
                    models.BooleanField(
                        default=False, verbose_name="Парсинг успешный"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True, upload_to="categories/", verbose_name="Изображение"
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория",
                "verbose_name_plural": "Категории",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="Опубликовано"),
                ),
                (
                    "ordering",
                    models.PositiveSmallIntegerField(
                        default=500, verbose_name="Порядок"
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        max_length=150,
                        populate_from="name",
                        verbose_name="slug",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=350, verbose_name="SEO Title"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="SEO Description"
                    ),
                ),
                ("h1", models.CharField(blank=True, max_length=250, verbose_name="H1")),
                (
                    "is_index",
                    models.BooleanField(default=True, verbose_name="Robots index"),
                ),
                (
                    "is_follow",
                    models.BooleanField(default=True, verbose_name="Robots follow"),
                ),
                (
                    "name",
                    models.CharField(max_length=500, verbose_name="Название продукта"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=2500, verbose_name="Описание"
                    ),
                ),
                (
                    "parse_url",
                    models.URLField(
                        blank=True, max_length=500, verbose_name="URL парсинга"
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Рассчитывается автоматически, если указан вес метра и длина",
                        max_digits=20,
                        verbose_name="Цена за штуку",
                    ),
                ),
                (
                    "ton_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Спаршеная цена за тонну, обновляется сама",
                        max_digits=20,
                        verbose_name="Цена за тонну",
                    ),
                ),
                (
                    "meter_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Рассчитывается автоматически, если указан вес метра",
                        max_digits=20,
                        verbose_name="Цена за метр",
                    ),
                ),
                (
                    "custom_ton_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Приоритет отображения цены выше, чем у спаршеной",
                        max_digits=20,
                        verbose_name="Своя цена за тонну",
                    ),
                ),
                (
                    "custom_unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Приоритет отображения цены выше, чем у спаршеной",
                        max_digits=20,
                        verbose_name="Своя цена за штуку",
                    ),
                ),
                (
                    "custom_meter_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Приоритет отображения цены выше, чем у спаршеной",
                        max_digits=20,
                        verbose_name="Своя цена за метр",
                    ),
                ),
                (
                    "in_stock",
                    models.BooleanField(default=True, verbose_name="В наличии"),
                ),
                (
                    "always_in_stock",
                    models.BooleanField(
                        default=False,
                        help_text="Не зависит от парсинга, имеет высший приоритет",
                        verbose_name="Всегда в наличии",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар",
                "verbose_name_plural": "Товары",
            },
        ),
        migrations.CreateModel(
            name="ProductProperty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="Опубликовано"),
                ),
                (
                    "ordering",
                    models.PositiveSmallIntegerField(
                        default=500, verbose_name="Порядок"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=250, verbose_name="Название свойства"),
                ),
                (
                    "code",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        populate_from="name",
                        verbose_name="Код свойства",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=2500, verbose_name="Описание"
                    ),
                ),
                (
                    "units",
                    models.CharField(
                        blank=True, max_length=250, verbose_name="Единицы измерения"
                    ),
                ),
                (
                    "is_display_in_list",
                    models.BooleanField(
                        default=False, verbose_name="Отображать в списке продкутов?"
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="product_properties",
                        to="catalog.category",
                        verbose_name="Категории продуктов",
                    ),
                ),
            ],
            options={
                "verbose_name": "Свойство товара",
                "verbose_name_plural": "Свойства товаров",
                "ordering": ("ordering",),
            },
        ),
        migrations.CreateModel(
            name="ProductPropertyValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        blank=True, max_length=250, verbose_name="Значение"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="properties_through",
                        to="catalog.product",
                    ),
                ),
                (
                    "property",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values_through",
                        to="catalog.productproperty",
                    ),
                ),
            ],
            options={
                "verbose_name": "Значение свойства продукта",
                "verbose_name_plural": "Значения свойств продукта",
                "ordering": ("property__ordering",),
                "unique_together": {("product", "property")},
            },
        ),
        migrations.CreateModel(
            name="ProductCategories",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False, verbose_name="Главная категория"
                    ),
                ),
                (
                    "is_display",
                    models.BooleanField(
                        default=False, verbose_name="Отображать в категории?"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_categories",
                        to="catalog.category",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_categories",
                        to="catalog.product",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="categories",
            field=models.ManyToManyField(
                related_name="products",
                through="catalog.ProductCategories",
                to="catalog.category",
                verbose_name="Категории",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="properties",
            field=models.ManyToManyField(
                related_name="products",
                through="catalog.ProductPropertyValue",
                to="catalog.productproperty",
                verbose_name="Свойства",
            ),
        ),
    ]
